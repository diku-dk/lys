-- | Lights, camera, action!
--
-- Making use of Lys requires hooking into (or duplicating) its custom
-- Makefile rules, so you should also read the [usage
-- section](https://github.com/diku-dk/lys/blob/master/README.md#general-usage)
-- of the README.
--
-- On the Futhark side, you need to define a module called `lys` that
-- implements the module type `lys`@mtype.  You can do this directly,
-- or use some of the various conveniences defined in this file.  For
-- example, if you do not care about showing any text, you can use
-- `lys_no_text`@mtype.

-- | For convenience, re-export the colour module.
open import "../../athas/matte/colour"

-- | UTF-8 encoded string.  This is what is produced by string
-- literals in Futhark code.
type string [n] = [n]u8

-- | An event is sent when something has happened that might cause the
-- state of the program to change, or just when some time has passed.
-- It is permissible to ignore all of these events.  Things that must
-- not be ignored are separate functions in `lys`@mtype.
--
-- * `#step x`: `x` seconds have passed since `init` or the last time
--   this event was received.
--
-- * `#keydown {key}`: `key` has pressed.
--
-- * `#keyup {key}`: `key` has been released.
--
-- * `#mouse {buttons, x, y}`: The mouse has been moved or clicked.
--   `buttons` is a bit mask indicating which button(s) are held down,
--   and the `x`/`y` the new position of the mouse.
--
-- * `#wheel {dx, dy}`: The mouse wheel has been used.  Note that there can
--   be multiple wheels; this is why the `dy` direction also makes
--   sense.  In most cases, however, only the `dy` will be non-zero.
type event = #step f32
           | #keydown {key:i32}
           | #keyup {key:i32}
           | #mouse {buttons:i32, x:i32, y:i32}
           | #wheel {dx:i32, dy:i32}

-- | The core subset of the module type of Lys applications.  This is useful if
-- you need a Lys application with custom initialisation or without text
-- rendering.
module type lys_core = {
  -- | The state maintained by this Lys application.  Most functions
  -- will take the current state and return a new state.
  type~ state

  -- | An event occured.  It is permissible to ignore any of these
  -- events by returning the same state unchanged.
  val event : event -> state -> state

  -- | The window was resized.
  val resize : (h: i64) -> (w: i64) -> state -> state

  -- | The function for rendering a screen image in row-major order
  -- (height by width).  The size of the array returned must match the
  -- last dimensions provided to the state (via `init`@term or
  -- `resize`@term).
  val render : state -> [][]argb.colour
}

-- | The module type of Lys applications.  If you define a module
-- called `lys` that has this module type, then the autogenerated Lys
-- wrapper application can automatically define the entry point
-- functions that allows Lys to communicate with the C program that
-- actually implements the user interaction.
module type lys = {
  include lys_core

  -- | Initial state for a given window size.  A random seed is passed
  -- in.  Don't treat this as a true random number (it's currently
  -- just a timestamp), but use it for initialising a proper RNG.
  val init : (seed: u32) -> (h: i64) -> (w: i64) -> state

  -- | If true, the program will grab the mouse, and all positions
  -- reported via the `mouse`@term function will be relative to the
  -- last time `mouse`@term was called.  If in doubt, leave this
  -- `false`.
  val grab_mouse : bool

  -- | Show helpful text in the upper-left corner.  Specify in printf format
  -- with extensions: '%[string1|string2|...]' prints a string but takes an
  -- index into the given list of strings, separated by '|'.  For example,
  -- '%[circle|square]' prints 'circle' if passed the i32 value 0, and 'square'
  -- if passed 1.

  val text_format : () -> string []
  -- | The content must be a scalar or a tuple of scalars.
  type text_content
  val text_content : (fps: f32) -> state -> text_content
  -- | The colour can vary based on the state.
  val text_colour : state -> argb.colour
}

-- | A module type for the simple case where we don't want any text.
-- You can define the `lys` module to have this module type instead of
-- `lys`@mtype.  For maximal convenience, you can `open`
-- `lys_no_text`@module inside your module definition.
module type lys_no_text = lys with text_content = ()

-- | A convenience module that can be `open`ed to give dummy
-- definitions for the text-related functionality.
module lys_no_text = {
  def text_format () = ""
  type text_content = ()
  def text_content _ _ = ()
  def text_colour _ = argb.black
}

-- | A dummy lys module that just produces a black rectangle and does
-- nothing in response to events.
module lys: lys_no_text = {
  type state = {h: i64, w: i64}
  def init _ h w = {h,w}
  def event _ s = s
  def resize h w _ = {h,w}
  def grab_mouse = false
  def render {h,w} = replicate w argb.black |> replicate h
  open lys_no_text
}

-- The following values are taken from
-- https://wiki.libsdl.org/SDLKeycodeLookup

def SDLK_UNKNOWN: i32 = 0x00
def SDLK_BACKSPACE: i32 = 0x08
def SDLK_TAB: i32 = 0x09
def SDLK_RETURN: i32 = 0x0D
def SDLK_ESCAPE: i32 = 0x1B
def SDLK_SPACE: i32 = 0x20
def SDLK_EXCLAIM: i32 = 0x21
def SDLK_QUOTEDBL: i32 = 0x22
def SDLK_HASH: i32 = 0x23
def SDLK_DOLLAR: i32 = 0x24
def SDLK_PERCENT: i32 = 0x25
def SDLK_AMPERSAND: i32 = 0x26
def SDLK_QUOTE: i32 = 0x27
def SDLK_LEFTPAREN: i32 = 0x28
def SDLK_RIGHTPAREN: i32 = 0x29
def SDLK_ASTERISK: i32 = 0x2A
def SDLK_PLUS: i32 = 0x2B
def SDLK_COMMA: i32 = 0x2C
def SDLK_MINUS: i32 = 0x2D
def SDLK_PERIOD: i32 = 0x2E
def SDLK_SLASH: i32 = 0x2F
def SDLK_0: i32 = 0x30
def SDLK_1: i32 = 0x31
def SDLK_2: i32 = 0x32
def SDLK_3: i32 = 0x33
def SDLK_4: i32 = 0x34
def SDLK_5: i32 = 0x35
def SDLK_6: i32 = 0x36
def SDLK_7: i32 = 0x37
def SDLK_8: i32 = 0x38
def SDLK_9: i32 = 0x39
def SDLK_COLON: i32 = 0x3A
def SDLK_SEMICOLON: i32 = 0x3B
def SDLK_LESS: i32 = 0x3C
def SDLK_EQUALS: i32 = 0x3D
def SDLK_GREATER: i32 = 0x3E
def SDLK_QUESTION: i32 = 0x3F
def SDLK_AT: i32 = 0x40
def SDLK_LEFTBRACKET: i32 = 0x5B
def SDLK_BACKSLASH: i32 = 0x5C
def SDLK_RIGHTBRACKET: i32 = 0x5D
def SDLK_CARET: i32 = 0x5E
def SDLK_UNDERSCORE: i32 = 0x5F
def SDLK_BACKQUOTE: i32 = 0x60
def SDLK_a: i32 = 0x61
def SDLK_b: i32 = 0x62
def SDLK_c: i32 = 0x63
def SDLK_d: i32 = 0x64
def SDLK_e: i32 = 0x65
def SDLK_f: i32 = 0x66
def SDLK_g: i32 = 0x67
def SDLK_h: i32 = 0x68
def SDLK_i: i32 = 0x69
def SDLK_j: i32 = 0x6A
def SDLK_k: i32 = 0x6B
def SDLK_l: i32 = 0x6C
def SDLK_m: i32 = 0x6D
def SDLK_n: i32 = 0x6E
def SDLK_o: i32 = 0x6F
def SDLK_p: i32 = 0x70
def SDLK_q: i32 = 0x71
def SDLK_r: i32 = 0x72
def SDLK_s: i32 = 0x73
def SDLK_t: i32 = 0x74
def SDLK_u: i32 = 0x75
def SDLK_v: i32 = 0x76
def SDLK_w: i32 = 0x77
def SDLK_x: i32 = 0x78
def SDLK_y: i32 = 0x79
def SDLK_z: i32 = 0x7A
def SDLK_DELETE: i32 = 0x7F
def SDLK_CAPSLOCK: i32 = 0x40000039
def SDLK_F1: i32 = 0x4000003A
def SDLK_F2: i32 = 0x4000003B
def SDLK_F3: i32 = 0x4000003C
def SDLK_F4: i32 = 0x4000003D
def SDLK_F5: i32 = 0x4000003E
def SDLK_F6: i32 = 0x4000003F
def SDLK_F7: i32 = 0x40000040
def SDLK_F8: i32 = 0x40000041
def SDLK_F9: i32 = 0x40000042
def SDLK_F10: i32 = 0x40000043
def SDLK_F11: i32 = 0x40000044
def SDLK_F12: i32 = 0x40000045
def SDLK_PRINTSCREEN: i32 = 0x40000046
def SDLK_SCROLLLOCK: i32 = 0x40000047
def SDLK_PAUSE: i32 = 0x40000048
def SDLK_INSERT: i32 = 0x40000049
def SDLK_HOME: i32 = 0x4000004A
def SDLK_PAGEUP: i32 = 0x4000004B
def SDLK_END: i32 = 0x4000004D
def SDLK_PAGEDOWN: i32 = 0x4000004E
def SDLK_RIGHT: i32 = 0x4000004F
def SDLK_LEFT: i32 = 0x40000050
def SDLK_DOWN: i32 = 0x40000051
def SDLK_UP: i32 = 0x40000052
def SDLK_NUMLOCKCLEAR: i32 = 0x40000053
def SDLK_KP_DIVIDE: i32 = 0x40000054
def SDLK_KP_MULTIPLY: i32 = 0x40000055
def SDLK_KP_MINUS: i32 = 0x40000056
def SDLK_KP_PLUS: i32 = 0x40000057
def SDLK_KP_ENTER: i32 = 0x40000058
def SDLK_KP_1: i32 = 0x40000059
def SDLK_KP_2: i32 = 0x4000005A
def SDLK_KP_3: i32 = 0x4000005B
def SDLK_KP_4: i32 = 0x4000005C
def SDLK_KP_5: i32 = 0x4000005D
def SDLK_KP_6: i32 = 0x4000005E
def SDLK_KP_7: i32 = 0x4000005F
def SDLK_KP_8: i32 = 0x40000060
def SDLK_KP_9: i32 = 0x40000061
def SDLK_KP_0: i32 = 0x40000062
def SDLK_KP_PERIOD: i32 = 0x40000063
def SDLK_APPLICATION: i32 = 0x40000065
def SDLK_POWER: i32 = 0x40000066
def SDLK_KP_EQUALS: i32 = 0x40000067
def SDLK_F13: i32 = 0x40000068
def SDLK_F14: i32 = 0x40000069
def SDLK_F15: i32 = 0x4000006A
def SDLK_F16: i32 = 0x4000006B
def SDLK_F17: i32 = 0x4000006C
def SDLK_F18: i32 = 0x4000006D
def SDLK_F19: i32 = 0x4000006E
def SDLK_F20: i32 = 0x4000006F
def SDLK_F21: i32 = 0x40000070
def SDLK_F22: i32 = 0x40000071
def SDLK_F23: i32 = 0x40000072
def SDLK_F24: i32 = 0x40000073
def SDLK_EXECUTE: i32 = 0x40000074
def SDLK_HELP: i32 = 0x40000075
def SDLK_MENU: i32 = 0x40000076
def SDLK_SELECT: i32 = 0x40000077
def SDLK_STOP: i32 = 0x40000078
def SDLK_AGAIN: i32 = 0x40000079
def SDLK_UNDO: i32 = 0x4000007A
def SDLK_CUT: i32 = 0x4000007B
def SDLK_COPY: i32 = 0x4000007C
def SDLK_PASTE: i32 = 0x4000007D
def SDLK_FIND: i32 = 0x4000007E
def SDLK_MUTE: i32 = 0x4000007F
def SDLK_VOLUMEUP: i32 = 0x40000080
def SDLK_VOLUMEDOWN: i32 = 0x40000081
def SDLK_KP_COMMA: i32 = 0x40000085
def SDLK_KP_EQUALSAS400: i32 = 0x40000086
def SDLK_ALTERASE: i32 = 0x40000099
def SDLK_SYSREQ: i32 = 0x4000009A
def SDLK_CANCEL: i32 = 0x4000009B
def SDLK_CLEAR: i32 = 0x4000009C
def SDLK_PRIOR: i32 = 0x4000009D
def SDLK_RETURN2: i32 = 0x4000009E
def SDLK_SEPARATOR: i32 = 0x4000009F
def SDLK_OUT: i32 = 0x400000A0
def SDLK_OPER: i32 = 0x400000A1
def SDLK_CLEARAGAIN: i32 = 0x400000A2
def SDLK_CRSEL: i32 = 0x400000A3
def SDLK_EXSEL: i32 = 0x400000A4
def SDLK_KP_00: i32 = 0x400000B0
def SDLK_KP_000: i32 = 0x400000B1
def SDLK_THOUSANDSSEPARATOR: i32 = 0x400000B2
def SDLK_DECIMALSEPARATOR: i32 = 0x400000B3
def SDLK_CURRENCYUNIT: i32 = 0x400000B4
def SDLK_CURRENCYSUBUNIT: i32 = 0x400000B5
def SDLK_KP_LEFTPAREN: i32 = 0x400000B6
def SDLK_KP_RIGHTPAREN: i32 = 0x400000B7
def SDLK_KP_LEFTBRACE: i32 = 0x400000B8
def SDLK_KP_RIGHTBRACE: i32 = 0x400000B9
def SDLK_KP_TAB: i32 = 0x400000BA
def SDLK_KP_BACKSPACE: i32 = 0x400000BB
def SDLK_KP_A: i32 = 0x400000BC
def SDLK_KP_B: i32 = 0x400000BD
def SDLK_KP_C: i32 = 0x400000BE
def SDLK_KP_D: i32 = 0x400000BF
def SDLK_KP_E: i32 = 0x400000C0
def SDLK_KP_F: i32 = 0x400000C1
def SDLK_KP_XOR: i32 = 0x400000C2
def SDLK_KP_POWER: i32 = 0x400000C3
def SDLK_KP_PERCENT: i32 = 0x400000C4
def SDLK_KP_LESS: i32 = 0x400000C5
def SDLK_KP_GREATER: i32 = 0x400000C6
def SDLK_KP_AMPERSAND: i32 = 0x400000C7
def SDLK_KP_DBLAMPERSAND: i32 = 0x400000C8
def SDLK_KP_VERTICALBAR: i32 = 0x400000C9
def SDLK_KP_DBLVERTICALBAR: i32 = 0x400000CA
def SDLK_KP_COLON: i32 = 0x400000CB
def SDLK_KP_HASH: i32 = 0x400000CC
def SDLK_KP_SPACE: i32 = 0x400000CD
def SDLK_KP_AT: i32 = 0x400000CE
def SDLK_KP_EXCLAM: i32 = 0x400000CF
def SDLK_KP_MEMSTORE: i32 = 0x400000D0
def SDLK_KP_MEMRECALL: i32 = 0x400000D1
def SDLK_KP_MEMCLEAR: i32 = 0x400000D2
def SDLK_KP_MEMADD: i32 = 0x400000D3
def SDLK_KP_MEMSUBTRACT: i32 = 0x400000D4
def SDLK_KP_MEMMULTIPLY: i32 = 0x400000D5
def SDLK_KP_MEMDIVIDE: i32 = 0x400000D6
def SDLK_KP_PLUSMINUS: i32 = 0x400000D7
def SDLK_KP_CLEAR: i32 = 0x400000D8
def SDLK_KP_CLEARENTRY: i32 = 0x400000D9
def SDLK_KP_BINARY: i32 = 0x400000DA
def SDLK_KP_OCTAL: i32 = 0x400000DB
def SDLK_KP_DECIMAL: i32 = 0x400000DC
def SDLK_KP_HEXADECIMAL: i32 = 0x400000DD
def SDLK_LCTRL: i32 = 0x400000E0
def SDLK_LSHIFT: i32 = 0x400000E1
def SDLK_LALT: i32 = 0x400000E2
def SDLK_LGUI: i32 = 0x400000E3
def SDLK_RCTRL: i32 = 0x400000E4
def SDLK_RSHIFT: i32 = 0x400000E5
def SDLK_RALT: i32 = 0x400000E6
def SDLK_RGUI: i32 = 0x400000E7
def SDLK_MODE: i32 = 0x40000101
def SDLK_AUDIONEXT: i32 = 0x40000102
def SDLK_AUDIOPREV: i32 = 0x40000103
def SDLK_AUDIOSTOP: i32 = 0x40000104
def SDLK_AUDIOPLAY: i32 = 0x40000105
def SDLK_AUDIOMUTE: i32 = 0x40000106
def SDLK_MEDIASELECT: i32 = 0x40000107
def SDLK_WWW: i32 = 0x40000108
def SDLK_MAIL: i32 = 0x40000109
def SDLK_CALCULATOR: i32 = 0x4000010A
def SDLK_COMPUTER: i32 = 0x4000010B
def SDLK_AC_SEARCH: i32 = 0x4000010C
def SDLK_AC_HOME: i32 = 0x4000010D
def SDLK_AC_BACK: i32 = 0x4000010E
def SDLK_AC_FORWARD: i32 = 0x4000010F
def SDLK_AC_STOP: i32 = 0x40000110
def SDLK_AC_REFRESH: i32 = 0x40000111
def SDLK_AC_BOOKMARKS: i32 = 0x40000112
def SDLK_BRIGHTNESSDOWN: i32 = 0x40000113
def SDLK_BRIGHTNESSUP: i32 = 0x40000114
def SDLK_DISPLAYSWITCH: i32 = 0x40000115
def SDLK_KBDILLUMTOGGLE: i32 = 0x40000116
def SDLK_KBDILLUMDOWN: i32 = 0x40000117
def SDLK_KBDILLUMUP: i32 = 0x40000118
def SDLK_EJECT: i32 = 0x40000119
def SDLK_SLEEP: i32 = 0x4000011A
